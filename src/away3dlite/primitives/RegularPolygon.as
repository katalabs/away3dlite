package away3dlite.primitives{	import away3dlite.arcane;    	use namespace arcane;	    /**    * Creates a regular polygon.    */     public class RegularPolygon extends AbstractPrimitive    {        private var _radius:Number = 100;        private var _segmentsW:int = 8;        private var _yUp:Boolean = true;        		/**		 * @inheritDoc		 */    	protected override function buildPrimitive():void    	{    		super.buildPrimitive();    					var i:int = 0;						_yUp? _vertices.push(0, 0, 0) : _vertices.push(0, 0, 0);			_uvtData.push(0.5, 0.5, 1);			            for (i = 0; i < _segmentsW; ++i) {                 var verangle:Number = 2*Math.PI*i/_segmentsW;                var x:Number = _radius*Math.cos(verangle);                var y:Number = _radius*Math.sin(verangle);                                _yUp? _vertices.push(x, 0, y) : _vertices.push(x, y, 0);                                _uvtData.push(0.5 - 0.5*x/_radius, 0.5 + 0.5*y/_radius, 1);            }			            for (i = 0; i < _segmentsW; ++i)                _indices.push(0, i + 1, (i + 1 + _segmentsW) % (_segmentsW) + 1);		}		/**    	 * Defines the radius of the polygon. Defaults to 100.    	 */    	public function get radius():Number    	{    		return _radius;    	}    	    	public function set radius(val:Number):void    	{    		if (_radius == val)    			return;    		    		_radius = val;    		_primitiveDirty = true;    	}    	    	/**    	 * Defines the number of horizontal segments that make up the cylinder. Defaults to 8.    	 */    	public function get segmentsW():int    	{    		return _segmentsW;    	}    	    	public function set segmentsW(val:int):void    	{    		if (_segmentsW == val)    			return;    		    		_segmentsW = val;    		_primitiveDirty = true;    	}    	    	/**    	 * Defines whether the coordinates of the polygon points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.    	 */    	public function get yUp():Boolean    	{    		return _yUp;    	}    	    	public function set yUp(val:Boolean):void    	{    		if (_yUp == val)    			return;    		    		_yUp = val;    		_primitiveDirty = true;    	}    			/**		 * Creates a new <code>RegularPolygon</code> object.		 *		 * @param	init			[optional]	An initialisation object for specifying default instance properties.		 */        public function RegularPolygon()        {            super();						type = "RegularPolygon";        	url = "primitive";        }    }}