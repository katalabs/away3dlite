package away3dlite.primitives{	import away3dlite.arcane;	import away3dlite.core.base.*;    import away3dlite.materials.*;    	use namespace arcane;	    /**    * Creates a regular polygon.    */     public class RegularPolygon extends AbstractPrimitive    {        private var _radius:Number = 100;        private var _segmentsW:int = 8;        private var _yUp:Boolean = true;        		/**		 * @inheritDoc		 */    	protected override function buildPrimitive():void    	{    		super.buildPrimitive();    					var i:int = 0;						_yUp? _vertices.push(0, 0, 0) : _vertices.push(0, 0, 0);			_uvtData.push(0.5, 0.5, 1);			            for (i = 0; i < _segmentsW; ++i) {                 var verangle:Number = 2*Math.PI*i/_segmentsW;                var x:Number = _radius*Math.cos(verangle);                var y:Number = _radius*Math.sin(verangle);                                _yUp? _vertices.push(x, 0, y) : _vertices.push(x, y, 0);                                _uvtData.push(0.5 - 0.5*x/_radius, 0.5 + 0.5*y/_radius, 1);            }			            for (i = 0; i < _segmentsW; ++i) {                _indices.push(0, i + 1, (i + 1 + _segmentsW) % (_segmentsW) + 1);            	_faceLengths.push(3);            }		}		/**    	 * Defines the radius of the regular polygon. Defaults to 100.    	 */    	public function get radius():Number    	{    		return _radius;    	}    	    	public function set radius(val:Number):void    	{    		if (_radius == val)    			return;    		    		_radius = val;    		_primitiveDirty = true;    	}    	    	/**    	 * Defines the number of horizontal segments that make up the regular polygon. Defaults to 8.    	 */    	public function get segmentsW():int    	{    		return _segmentsW;    	}    	    	public function set segmentsW(val:int):void    	{    		if (_segmentsW == val)    			return;    		    		_segmentsW = val;    		_primitiveDirty = true;    	}    	    	/**    	 * Defines whether the coordinates of the regular polygon points use a yUp orientation (true) or a zUp orientation (false). Defaults to true.    	 */    	public function get yUp():Boolean    	{    		return _yUp;    	}    	    	public function set yUp(val:Boolean):void    	{    		if (_yUp == val)    			return;    		    		_yUp = val;    		_primitiveDirty = true;    	}    			/**		 * Creates a new <code>RegularPolygon</code> object.		 * 		 * @param	material	Defines the global material used on the faces in the regular polygon.		 * @param	radius		Defines the radius of the regular polygon base.		 * @param	segmentsW	Defines the number of horizontal segments that make up the regular polygon.		 * @param	yUp			Defines whether the coordinates of the regular polygon points use a yUp orientation (true) or a zUp orientation (false).		 */        public function RegularPolygon(material:Material = null, radius:Number = 100, segmentsW:int = 8, yUp:Boolean = true)        {            super(material);						_radius = radius;			_segmentsW = segmentsW;			_yUp = yUp;						type = "RegularPolygon";        	url = "primitive";        }		        		/**		 * Duplicates the regular polygon properties to another <code>RegularPolygon</code> object.		 * 		 * @param	object	[optional]	The new object instance into which all properties are copied. The default is <code>RegularPolygon</code>.		 * @return						The new object instance with duplicated properties applied.		 */        public override function clone(object:Object3D = null):Object3D        {            var regularpolygon:RegularPolygon = (object as RegularPolygon) || new RegularPolygon();            super.clone(regularpolygon);            regularpolygon.radius = _radius;            regularpolygon.segmentsW = _segmentsW;			regularpolygon.yUp = _yUp;			regularpolygon._primitiveDirty = false;						return regularpolygon;        }    }}