<languageVersion : 1.0;>

kernel NewFilter
<   namespace : "Open3D";
    vendor : "kris@neuroproductions.be";
    version : 1;
    description : "Basic shader +- interface for other shaders";
>
{
  parameter float x <
       minValue:float(-6.28318531);
       maxValue:float(6.28318531);
       defaultValue:float(0.0);
       description:"rotation around X axis";
   >;
parameter float y <
       minValue:float(-6.28318531);
       maxValue:float(6.28318531);
       defaultValue:float(0.0);
       description:"rotation around Y axis";
   >;
  parameter float z <
       minValue:float(-6.28318531);
       maxValue:float(6.28318531);
       defaultValue:float(0);
       description:"rotation around Z axis";
   >;
  parameter float xl <
       minValue:float(-1);
       maxValue:float(1);
       defaultValue:float(0.0);
       description:"light direction normal X";
   >;
parameter float yl <
       minValue:float(-1);
       maxValue:float(1);
       defaultValue:float(0.0);
       description:"light direction normal y";
   >;
  parameter float zl <
       minValue:float(-1);
       maxValue:float(1);
       defaultValue:float(-1);
       description:"light direction normal z";
   >;
   //input image4 layer1;
    input image4 src;
     input image3 inputi;
    output pixel4 dest;


    
    
    void
    evaluatePixel()
    {
       
      
        pixel4 ln = sampleNearest(src, outCoord());
        pixel3 ld = sampleNearest(inputi, outCoord());
       pixel4 temp = ln; 
        
        
        //create a vector from the rgb values
        float a = (ln.r*2.0)-1.0;
        float b = (ln.g*2.0)-1.0;
        float c =(ln.b*2.0)-1.0;
        float3 vec  =float3(a,b,c);
       
        //create matrixes to rotate around xy and z axis
        float3x3 Xrot =float3x3(1.0,0.0,0.0,0.0,cos(x),sin(x),0,-sin(x),cos(x));
        float3x3 Yrot =float3x3(cos(y),0.0,-sin(y),0.0,1.0,0.0,sin(y),0.0,cos(y));
        float3x3 Zrot =float3x3(cos(z),sin(z),0.0,-sin(z),cos(z),0.0,0.0,0.0,1.0);
        
        
  
        float3 normal = vec*Xrot*Yrot*Zrot;
        
      
        // convert the transformed vector back to rgb (use if needed)
        temp.r =(normal.x+1.0)/2.0;
        temp.g =( normal.y+1.0)/2.0;
        temp.b =1.0-(normal.z+1.0)/2.0;
       
        
        //do stuff
        // calculate light value
       float pVal = normal.x *xl+normal.y*yl +normal.z *zl;
        temp.r = pVal ;
        temp.g = pVal;
        temp.b = pVal;
        
     pixel4 temp2;
      temp2.rgb = ld.rgb;
        temp2.a =1.0;
         temp2+=0.3;
        //blend with layer 1
       temp = temp*temp2;

        dest = temp ;
       
       
    }
}
